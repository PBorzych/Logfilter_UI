# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'logfilter_1.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Logfilter(object):
    def setupUi(self, Logfilter):
        Logfilter.setObjectName("Logfilter")
        Logfilter.resize(585, 808)

        self.centralwidget = QtWidgets.QWidget(Logfilter)
        self.centralwidget.setObjectName("centralwidget")

        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")

        # Setup UI components
        self._setup_main_layout()
        self._setup_mode_selection()
        self._setup_status_display()
        self._setup_menu(Logfilter)

        Logfilter.setCentralWidget(self.centralwidget)
        Logfilter.setStatusBar(self.statusbar)

        self.retranslateUi(Logfilter)
        QtCore.QMetaObject.connectSlotsByName(Logfilter)

    def _setup_main_layout(self):
        # Fonts
        font_bold_11 = QtGui.QFont()
        font_bold_11.setPointSize(11)
        font_bold_11.setBold(True)

        font_bold_12 = QtGui.QFont()
        font_bold_12.setPointSize(12)
        font_bold_12.setBold(True)

        font_12 = QtGui.QFont()
        font_12.setPointSize(12)

        # Browse Button
        self.pushButton_browse = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_browse.setObjectName("pushButton_browse")
        self.gridLayout.addWidget(self.pushButton_browse, 0, 0, 1, 1)

        # Directory ComboBox
        self.comboBox_directory = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_directory.setObjectName("comboBox_directory")
        self.gridLayout.addWidget(self.comboBox_directory, 1, 0, 1, 2)

        # Start and Stop Buttons
        self.pushButton_start = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_start.setObjectName("pushButton_start")
        self.gridLayout.addWidget(self.pushButton_start, 5, 0, 1, 1)

        self.pushButton_stop = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_stop.setObjectName("pushButton_stop")
        self.gridLayout.addWidget(self.pushButton_stop, 5, 1, 1, 1)

        # Results / Log Label and TextBrowser
        self.label_results = QtWidgets.QLabel(self.centralwidget)
        self.label_results.setFont(font_bold_12)
        self.label_results.setObjectName("label_results")
        self.gridLayout.addWidget(self.label_results, 6, 0, 1, 2)

        self.textBrowser_log = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_log.setObjectName("textBrowser_log")
        self.gridLayout.addWidget(self.textBrowser_log, 7, 0, 1, 2)

    def _setup_mode_selection(self):
        # Fonts
        font_bold_11 = QtGui.QFont()
        font_bold_11.setPointSize(11)
        font_bold_11.setBold(True)

        font_12 = QtGui.QFont()
        font_12.setPointSize(12)

        # Mode Label
        self.label_mode = QtWidgets.QLabel(self.centralwidget)
        self.label_mode.setFont(font_bold_11)
        self.label_mode.setObjectName("label_mode")
        self.gridLayout.addWidget(self.label_mode, 2, 0, 1, 2)

        # Radio Buttons for Mode Selection
        self.radioButton_real_time = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_real_time.setFont(font_12)
        self.radioButton_real_time.setObjectName("radioButton_real_time")
        self.gridLayout.addWidget(self.radioButton_real_time, 3, 0, 1, 2)

        self.radioButton_full_folder_check = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_full_folder_check.setFont(font_12)
        self.radioButton_full_folder_check.setObjectName("radioButton_full_folder_check")
        self.gridLayout.addWidget(self.radioButton_full_folder_check, 4, 0, 1, 2)

    def _setup_status_display(self):
        font_12 = QtGui.QFont()
        font_12.setPointSize(12)

        # Status Label and Value
        self.label_status = QtWidgets.QLabel(self.centralwidget)
        self.label_status.setFont(font_12)
        self.label_status.setObjectName("label_status")
        self.gridLayout.addWidget(self.label_status, 8, 0, 1, 1)

        self.label_status_value = QtWidgets.QLabel(self.centralwidget)
        self.label_status_value.setFont(font_12)
        self.label_status_value.setObjectName("label_status_value")
        self.gridLayout.addWidget(self.label_status_value, 8, 1, 1, 1)

    def _setup_menu(self, Logfilter):
        self.menubar = QtWidgets.QMenuBar(Logfilter)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 585, 22))
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")

        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")

        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")

        Logfilter.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Logfilter)
        self.statusbar.setObjectName("statusbar")

        # Actions
        self.actionOpen_Directory = QtWidgets.QAction(Logfilter)
        self.actionOpen_Directory.setObjectName("actionOpen_Directory")

        self.actionSave_Log = QtWidgets.QAction(Logfilter)
        self.actionSave_Log.setObjectName("actionSave_Log")

        self.actionLoad_Log = QtWidgets.QAction(Logfilter)
        self.actionLoad_Log.setObjectName("actionLoad_Log")

        self.menuRecent_Directories = QtWidgets.QMenu(self.menuFile)
        self.menuRecent_Directories.setObjectName("menuRecent_Directories")

        self.actionExit = QtWidgets.QAction(Logfilter)
        self.actionExit.setObjectName("actionExit")

        self.actionSharepoint_Check_N_A = QtWidgets.QAction(Logfilter)
        self.actionSharepoint_Check_N_A.setObjectName("actionSharepoint_Check_N_A")

        self.actionAbout = QtWidgets.QAction(Logfilter)
        self.actionAbout.setObjectName("actionAbout")

        # Add Actions to Menus
        self.menuFile.addAction(self.actionOpen_Directory)
        self.menuFile.addAction(self.actionSave_Log)
        self.menuFile.addAction(self.actionLoad_Log)
        self.menuFile.addMenu(self.menuRecent_Directories)
        self.menuFile.addAction(self.actionExit)

        self.menuSettings.addAction(self.actionSharepoint_Check_N_A)
        self.menuHelp.addAction(self.actionAbout)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

    def retranslateUi(self, Logfilter):
        _translate = QtCore.QCoreApplication.translate
        Logfilter.setWindowTitle(_translate("Logfilter", "Log Filter"))

        self.pushButton_browse.setText(_translate("Logfilter", "Browse"))
        self.pushButton_start.setText(_translate("Logfilter", "Start"))
        self.pushButton_stop.setText(_translate("Logfilter", "Stop"))

        self.label_mode.setText(_translate("Logfilter", "Mode"))
        self.radioButton_real_time.setText(_translate("Logfilter", "Real-time Monitoring"))
        self.radioButton_full_folder_check.setText(_translate("Logfilter", "Full Folder Error Check"))

        self.label_results.setText(_translate("Logfilter", "Results / Log"))

        self.label_status.setText(_translate("Logfilter", "Status:"))
        self.label_status_value.setText(_translate("Logfilter", "Not started"))

        self.menuFile.setTitle(_translate("Logfilter", "File"))
        self.menuSettings.setTitle(_translate("Logfilter", "Settings"))
        self.menuHelp.setTitle(_translate("Logfilter", "Help"))

        self.actionOpen_Directory.setText(_translate("Logfilter", "Open Directory"))
        self.actionSave_Log.setText(_translate("Logfilter", "Save Log"))
        self.actionLoad_Log.setText(_translate("Logfilter", "Load Log"))
        self.menuRecent_Directories.setTitle(_translate("Logfilter", "Recent Directories"))
        self.actionExit.setText(_translate("Logfilter", "Exit"))
        self.actionSharepoint_Check_N_A.setText(_translate("Logfilter", "Sharepoint Check (N/A)"))
        self.actionAbout.setText(_translate("Logfilter", "About"))


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     Logfilter = QtWidgets.QMainWindow()
#     ui = Ui_Logfilter()
#     ui.setupUi(Logfilter)
#     Logfilter.show()
#     sys.exit(app.exec_())
